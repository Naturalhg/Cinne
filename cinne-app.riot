<cinne-app>
    <div class="background">
        <router base={base}>

            <!-- route par défaut : menu principal -->
            <route path="(#)?">
                <landing updateCinneList={updateCinneList} type={state.currentType} genres={state.allGenders} langue={state.langue}></landing>
                <h2 id="home">{state.currentTitle}</h2>
                <pagination currentPageNum={state.currentCinneList.page} maxPageNum={state.currentCinneList.total_pages}
                        updateCinneList={updateCinneList}></pagination>
                <div class="cinne-container">
                    <cinne each={cinne in state.currentCinneList.results} cinne={cinne} type={state.currentType}
                        updateCinneList={updateCinneList} getYear={getYear} langue={state.langue}></cinne>
                </div>
                <my-footer updateCinneList={updateCinneList} langue={state.langue}></my-footer>
            </route>

            <!-- route du menu principal pour les artistes -->
            <route path="#/artist">
                <landing updateCinneList={updateCinneList} type={state.currentType} langue={state.langue}></landing>
                <h2 id="home">{state.currentTitle}</h2>
                <pagination currentPageNum={state.currentCinneList.page} maxPageNum={state.currentCinneList.total_pages}
                        updateCinneList={updateCinneList}></pagination>
                <div class="cinne-container">
                    <artist each={artist in state.currentCinneList.results} artist={artist} langue={state.langue}></artist>
                </div>
                <my-footer updateCinneList={updateCinneList} langue={state.langue}></my-footer>
            </route>

            <!-- route pour le contenu des films et séries -->
            <route path="#/show/:id">
                <cinne-page cinne_id={route.params.id} cinneUtils={cinneUtils} type={"movie"} originType={props.currentType}
                    getFullDate={getFullDate} scrollToTop={scrollToTop} updateCinneList={updateCinneList} langue={state.langue}></cinne-page>
            </route>

            <!-- route pour le contenu des films et séries -->
            <route path="#/tvshow/:id">
                <cinne-page cinne_id={route.params.id} cinneUtils={cinneUtils} type={"tv"} originType={props.currentType}
                    getFullDate={getFullDate} scrollToTop={scrollToTop} updateCinneList={updateCinneList} langue={state.langue}></cinne-page>
            </route>

            <!-- route pour le contenu des artistes -->
            <route path="#/artist/:id">
                <artist-page artist_id={route.params.id} cinneUtils={cinneUtils} getYear={getYear} scrollToTop={scrollToTop}
                    getFullDate={getFullDate} originType={props.currentType} updateCinneList={updateCinneList} langue={state.langue}></artist-page>
            </route>

        </router>
    </div>

    <script>

    export default {
        //base : 'https://dwarves.iut-fbleau.fr/~toussain/cinema/',

        onBeforeMount(props, state) {
            this.state = {
                currentCinneList: [],
                langue: '',
                currentType: '',
                currentTitle: '',
                currentFilter: '',
                allGenders: [],
                strGenders: ''
            }
        },

        onMounted() {
            this.updateCinneList();
        },

        async updateCinneList() {
            this.state.langue = localStorage.getItem("langue");
            let currentPage = localStorage.getItem("curr_page");
            this.state.currentType = localStorage.getItem("type");
            let currentType = this.state.currentType;

            if (this.state.langue != "fr" && this.state.langue != "en-US") {
                localStorage.setItem("langue", "fr");
                this.state.langue = "fr";
            }

            if (localStorage.getItem("search")) {
                this.updateSearch();
                if (currentType == "artist") {
                    window.location.href = "#/artist";
                    this.update();
                }
            }

            else {
                if (currentType == "artist") {
                    if (this.state.langue == "fr") { this.state.currentTitle = "Les artistes du moment"; }
                    else { this.state.currentTitle = "Popular Artists"; }
                    this.update ({
                        currentCinneList : await cinneUtils.getArtists(currentPage, this.state.langue)
                    })
                    window.location.href = "#/artist";
                }

                else {
                    if (currentType == 'movie' || currentType == 'tv') {
                        this.update ({
                            allGenders : await cinneUtils.getGenders(currentType, this.state.langue)
                        })
                        this.state.allGenders = this.state.allGenders.genres;
                        localStorage.setItem("all_genders", JSON.stringify(this.state.allGenders));
                        if (!JSON.parse(localStorage.getItem("genders"))) {
                            localStorage.setItem("genders", JSON.stringify([]));
                        }
                        this.stringifyGenders();
                    }

                    switch(localStorage.getItem("currfilter")) {
                        case "now":
                            if (this.state.langue == "fr") { this.state.currentTitle = "Tendances de la semaine"; }
                            else { this.state.currentTitle = "Now Playing"; }
                            this.state.currentFilter = "popularity.desc&with_release_type=2&primary_release_date.gte={min_date}&primary_release_date.lte={max_date}";
                            this.update ({
                                currentCinneList : await cinneUtils.getCinne(currentType, currentPage, this.state.currentFilter, this.state.strGenders, this.state.langue)
                            })
                            break
                        case "popular":
                            if (this.state.langue == "fr") { this.state.currentTitle = "Les plus populaires"; }
                            else { this.state.currentTitle = "Popular"; }
                            this.state.currentFilter = "popularity.desc";
                            this.update ({
                                currentCinneList : await cinneUtils.getCinne(currentType, currentPage, this.state.currentFilter, this.state.strGenders, this.state.langue)
                            })
                            break

                        case "top_rated":
                            if (this.state.langue == "fr") { this.state.currentTitle = "Les mieux notés"; }
                            else { this.state.currentTitle = "Top Rated"; }
                            this.state.currentFilter = "vote_average.desc&vote_count.gte=200";
                            this.update ({
                                currentCinneList : await cinneUtils.getCinne(currentType, currentPage, this.state.currentFilter, this.state.strGenders, this.state.langue)
                            })
                            break

                        case "coming_soon":
                            if (this.state.langue == "fr") { this.state.currentTitle = "Prochainement dans vos salles"; }
                            else { this.state.currentTitle = "Coming Soon"; }
                            if (currentType === "movie") {
                                this.state.currentFilter = "primary_release_date.asc&with_release_type=2|3&primary_release_date.gte={" + this.getDate() + "}";
                            } else if (currentType === "tv") {
                                this.state.currentFilter = "first_air_date.asc&first_air_date.gte={" + this.getDate() + "}";
                            }
                            this.update ({
                                currentCinneList : await cinneUtils.getCinne(currentType, currentPage, this.state.currentFilter, this.state.strGenders, this.state.langue)
                            })
                            break

                        default:
                            if (currentType != "artist") {
                                localStorage.setItem("currfilter", "now");
                                localStorage.setItem("curr_page", 1);
                                if (!localStorage.getItem("type")) {
                                    localStorage.setItem("type", "movie");
                                }
                                this.update ({
                                    allGenders: await cinneUtils.getGenders(localStorage.getItem("type"), this.state.langue)
                                })
                                this.state.allGenders = this.state.allGenders.genres;
                                localStorage.setItem("all_genders", JSON.stringify(this.state.allGenders))
                                localStorage.setItem("genders", JSON.stringify([]));
                            }
                            else {
                                localStorage.setItem("curr_page", 1);
                            }
                            this.updateCinneList();
                            break
                    }
                    if (currentPage > this.state.currentCinneList.total_pages) {
                        localStorage.setItem("curr_page", this.state.currentCinneList.total_pages);
                        this.updateCinneList();
                    }
                    console.log(currentType);
                    this.update();
                }
            }
        },

        getDate() {
            const date = new Date();
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const formattedDate = `${year}-${month}-${day}`;
            return formattedDate;
        },

        getYear(date) {
            return new Date(date).getFullYear();
        },

        getFullDate(date) {
            let fullDate = new Date(date);
            if (localStorage.getItem("langue") == "fr") {
                return fullDate.getDate() + "  " + fullDate.toLocaleString('fr', {month: 'long'}) + "  " + fullDate.getFullYear();
            } else {
                return fullDate.toLocaleString('en-US', {month: 'long'}) + "  " + fullDate.getDate() + ", " + fullDate.getFullYear();
            }
        },

        stringifyGenders() {
            let genres = '';
            let curr_genders = JSON.parse(localStorage.getItem("genders"));
            if (curr_genders.length > 0) {
                genres += curr_genders[0];

                if (curr_genders.length > 1) {
                    curr_genders.slice(1).forEach((genre) => {
                        genres += "," + genre;
                    });
                }
            }
            this.state.strGenders = genres;
        },

        scrollToTop() {
            window.scrollTo(0, 0);
        },

        async updateSearch() {
            currentPage = localStorage.getItem("curr_page");
            currentType = localStorage.getItem("type");
            currentSearch = localStorage.getItem("search");
            langue = localStorage.getItem("langue");
            switch (currentType) {
                case 'movie' :
                    if (this.state.langue == "fr") { this.state.currentTitle = "Recherche de film : ' " + currentSearch + " '"; }
                    else { this.state.currentTitle = "Movie search : ' " + currentSearch + " '"; }
                    break
                case 'tv' :
                    if (this.state.langue == "fr") { this.state.currentTitle = "Recherche de série : ' " + currentSearch + " '"; }
                    else { this.state.currentTitle = "TV Show search : ' " + currentSearch + " '"; }
                    break
                case 'artist' :
                    if (this.state.langue == "fr") { this.state.currentTitle = "Recherche d'artiste : ' " + currentSearch + " '"; }
                    else { this.state.currentTitle = "Artist search : ' " + currentSearch + " '"; }
                    break
            }
            if (currentType == "artist") {
                currentType = "person";
            } else {
                this.update ({
                    allGenders : await cinneUtils.getGenders(currentType, langue)
                })
                this.state.allGenders = this.state.allGenders.genres;
                localStorage.setItem("all_genders", JSON.stringify(this.state.allGenders));
            }
            this.update({
                currentCinneList: await cinneUtils.getSearch(currentType, currentPage, currentSearch, langue)
            })
        }
    }

    window.onscroll = function() {myFunction()};
    var saveScroll = 0;

    function myFunction() {
        var x = document.body.scrollTop || document.documentElement.scrollTop;
        if (x > 750 && document.getElementById("gotop")) {
            document.getElementById("gotop").classList.remove("invisible");
            document.getElementById("gotop").disabled = false;
        }
        else if (document.getElementById("gotop")) {
            document.getElementById("gotop").classList.add("invisible");
            document.getElementById("gotop").disabled = true;
        }
        let size = document.location.href.length;
        if (document.location.href.lastIndexOf("/index.html") == size - 11 || document.location.href.lastIndexOf("cinema/") == size - 7
            || document.location.href.lastIndexOf("/artist") == size - 7) {
            if (x > 750 && x < saveScroll) {
                document.getElementById("nav").classList.add("scrolled");
                document.getElementById("search-bar").classList.remove("none");
            }
            else {
                document.getElementById("nav").classList.remove("scrolled");
                document.getElementById("search-bar").classList.add("none");
            }
        }
        saveScroll = x;
    }
    </script>
</cinne-app>